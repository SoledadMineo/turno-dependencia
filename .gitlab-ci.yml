# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: docker/compose:1.29.2
services:
  - docker:dind
stages:          # List of stages for jobs, and their order of execution
  #- build
  #- test
  - deploy

#build-job:       # This job runs in the build stage, which runs first.
#  stage: build
#  script:
#    - docker-compose build
#    - echo "Compile complete."
#    - docker-compose up -d
#    - sleep 30
#    - export BUILD_NUMBER=3
#    - docker ps
#    - docker exec hola_mundo_php_1 php artisan migrate:fresh --seed --env=gitlab
#    - docker exec -t hola_mundo_php_1 php artisan test --env=gitlab --colors=never
#    - echo "testing OK!"
#    - docker-compose stop
#    - docker tag hola_mundo_nginx:latest  mpf-reg.jus.mendoza.gov.ar:9999/amalia/hola_mundo_nginx:GL-$BUILD_NUMBER
#    - docker push  mpf-reg.jus.mendoza.gov.ar:9999/amalia/hola_mundo_nginx:GL-$BUILD_NUMBER
#
#    - docker tag hola_mundo_php:latest  mpf-reg.jus.mendoza.gov.ar:9999/amalia/hola_mundo_php:GL-$BUILD_NUMBER
#    - docker push  mpf-reg.jus.mendoza.gov.ar:9999/amalia/hola_mundo_php:GL-$BUILD_NUMBER
#
#    - docker tag hola_mundo_postgres:latest  mpf-reg.jus.mendoza.gov.ar:9999/amalia/hola_mundo_postgres:GL-$BUILD_NUMBER
#    - docker push  mpf-reg.jus.mendoza.gov.ar:9999/amalia/hola_mundo_postgres:GL-$BUILD_NUMBER




#unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 60 seconds."
#    - sleep 6
#    - echo "Code coverage is 90%"
#
#
#
deploy-job:
  stage: deploy
  environment: production
  image: alpine:3.18.3
  before_script:
  - apk update && apk add git   # Instalamos Git en la imagen

  script:
    - echo "Deploying application... $CI_PIPELINE_IID + $CI_PIPELINE_ID"
    - git config --global user.email "ci@example.com"   # Configuramos el email del commit
    - git config --global user.name "CI/CD"            # Configuramos el nombre del commit
    - git clone $CI_REPOSITORY_URL tmp_repo            # Clonamos el repositorio en una carpeta temporal
    - cd tmp_repo

    - echo "Application successfully deployed."

#script:
#  - git config --global user.email "ci@example.com"   # Configuramos el email del commit
#  - git config --global user.name "CI/CD"            # Configuramos el nombre del commit
#  - git clone $CI_REPOSITORY_URL tmp_repo            # Clonamos el repositorio en una carpeta temporal
#  - cd tmp_repo
#  - echo "Nueva línea en ejemplo.txt" >> ejemplo.txt  # Modificamos el archivo ejemplo.txt
#  - git add ejemplo.txt
#  - git commit -m "Modificación automática en ejemplo.txt"  # Hacemos el commit
#  - git push origin $CI_COMMIT_REF_NAME  # Hacemos push a la rama actual
